{
	"DiscordNative":{
		//if the context is a rendering context
		"isRenderer": true,
		//sets the function that will be called when there is an error
		//should have the signiture `function (err, origin){...}`
		"setUncaughtExceptionHandler": "function (handler) { [native code] }",
		"nativeModules": {
			//if module dosent exist install it
			"ensureModule": "async function (name) { [native code] }",
			//returns `require(name)` if the name passes the /^discord_[a-z0-9_-]+$/ regex or is "erlpack"
			"requireModule": "function (name) { [native code] }",
			//dosent have new updater
			"canBootstrapNewUpdater": !NATIVE_MODULES_GET_HAS_NEW_UPDATER
		},
		"process": {
			"platform": process.platform,
			"arch": process.arch,
			//defines some constants
			"env": {}
		},
		"os": {
			"release": os.release(),
			//note if `process.platform === 'win32' && process.env['PROCESSOR_ARCHITEW6432'] != null` then this is x64
			"arch": os.arch()
		},
		"app": {
			"getReleaseChannel": "function () { [native code] }",
			"getVersion": "function () { [native code] }",
			"getModuleVersions": "function () { [native code] }",
			"getPath": "async function () { [native code] }",
			//sets the badge on the apps icon to the number `count`
			"setBadgeCount": "async function (count) { [native code] }",
			//these functions are related to the macos dock
			"dock": {
				"setBadge": "async function (badge) { [native code] }",
				"bounce": "async function (type) { [native code] }",
				"cancelBounce": "async function (id) { [native code] }"
			},
			//relaunches the app
			"relaunch": "async function () { [native code] }",
			//invokes APP_GET_DEFAULT_DOUBLE_CLICK_ACTION
			"getDefaultDoubleClickAction": "async function () { [native code] }",
			//esentialy another way of doing element.addEventListener except the eventType has to have the `isTrusted` attribute set to `true`
			//returns a wrapper to the removeEventListener function with the signiture `function () { ... }`
			//the element is selected like so `document.getElementById(elementId);`
			"registerUserInteractionHandler": "function (elementId, eventType, callback) { [native code] }"
		},
		"clipboard": {
			//copies the text passed in
			"copy": "function (text) { [native code] }",
			//copies `{html:\`<img src="${imageSrc}">\`,image: electron.nativeImage.createFromBuffer(imageArrayBuffer)}`
			//imageSrc should be the location of the image
			//imageArrayBuffer should be a nodejs Buffer
			"copyImage": "function (imageArrayBuffer, imageSrc) { [native code] }",
			//cuts selected text (only if discord is active)
			"cut": "function () { [native code] }",
			//pastes (only if discord is active)
			"paste": "function () { [native code] }",
			//returns the copied text
			"read": "function () { [native code] }"
		},
		"ipc": {
			//sends a command providing it is in the below list
			//DISCORD_APP_BADGE_SET, DISCORD_CHECK_FOR_UPDATES, DISCORD_NOTIFICATION_CLOSE, DISCORD_NOTIFICATION_SHOW, DISCORD_NOTIFICATIONS_CLEAR, DISCORD_OPEN_EXTERNAL_URL, DISCORD_QUIT_AND_INSTALL, DISCORD_SETTINGS_UPDATE_BACKGROUND_COLOR, DISCORD_SYSTEM_TRAY_SET_ICON, DISCORD_SYSTEM_TRAY_SET_APPLICATIONS, DISCORD_THUMBAR_BUTTONS_UPDATE, DISCORD_TOGGLE_MINIMIZE_TO_TRAY, DISCORD_TOGGLE_OPEN_ON_STARTUP, DISCORD_TOGGLE_START_MINIMIZED, DISCORD_UPDATE_OPEN_ON_STARTUP, DISCORD_UPDATER_HISTORY_QUERY_AND_TRUNCATE, DISCORD_UPDATED_QUOTES
			//also the event name is prepended with DISCORD_ if it doesnt already have that prefix
			"send": "function (ev, ...args) { [native code] }",
			//when the `ev` event is recived calls the callback function with the arguments of the callback function of electron.ipcRenderer but the first one is always `null`
			//again the event name is prepended with DISCORD_ if it doesnt already have that prefix
			"on": "function (ev, callback) { [native code] }",
			//invokes the event with the arguments if the event name is in the list above (for the send docs)
			//again the event name `ev` is prepended with DISCORD_ if it doesnt already have that prefix
			"invoke": "function (ev, ...args) { [native code] }"
		},
		"gpuSettings": {
			"getEnableHardwareAcceleration": "function () { [native code] }",
			"setEnableHardwareAcceleration": "async function () { [native code] }"
		},
		//these functions all just call the coresponding ipc command unless documented else
		"window": {
			"flashFrame": "async function (flag) { [native code] }",
			"minimize": "async function (key) { [native code] }",
			"restore": "async function (key) { [native code] }",
			"maximize": "async function (key) { [native code] }",
			"focus": "async function (_hack, key) { [native code] }",
			"blur": "async function (key) { [native code] }",
			"fullscreen": "async function (key) { [native code] }",
			"close": "async function (key) { [native code] }",
			"setAlwaysOnTop": "async function (key, enabled) { [native code] }",
			"isAlwaysOnTop": "async function (key) { [native code] }",
			//this calles the ipc with a zoom percent not fraction
			"setZoomFactor": "async function (factor) { [native code] }",
			"setBackgroundThrottling": "async function (enabled) { [native code] }",
			"setProgressBar": "async function (progress, key) { [native code] }",
			//changes the DevtoolsCallbacks
			"setDevtoolsCallbacks": "async function (onOpened, onClosed) { [native code] }",
			//always true?
			"USE_OSX_NATIVE_TRAFFIC_LIGHTS": true
		},
		"powerMonitor": {
			"on": "function () { [native code] }",
			"removeListener": "function () { [native code] }",
			"removeAllListeners": "function () { [native code] }",
			"getSystemIdleTimeMs": "function () { [native code] }"
		},
		"spellCheck": {
			"on": "function () { [native code] }",
			"removeListener": "function () { [native code] }",
			"getAvailableDictionaries": "function () { [native code] }",
			"setLocale": "async function (locale) { [native code] }",
			"setLearnedWords": "async function (learnedWords) { [native code] }",
			"replaceMisspelling": "async function (correction) { [native code] }"
		},
		//??
		"crashReporter": {
			"updateCrashReporter": "async function (additional_metadata) { [native code] }",
			"getMetadata": "function () { [native code] }"
		},
		"desktopCapture": {
			//returns a promise with a list of objects like so {id,name,url}
			"getDesktopCaptureSources": "function (options) { [native code] }"
		},
		"fileManager": {
			"readLogFiles": "function () { [native code] }",
			"readTimeSeriesLogFiles": "function () { [native code] }",
			"cleanupTempFiles": "function () { [native code] }",
			"saveWithDialog": "function () { [native code] }",
			"openFiles": "function () { [native code] }",
			"showOpenDialog": "function () { [native code] }",
			"showItemInFolder": "function () { [native code] }",
			"getModulePath": "function () { [native code] }",
			"getModuleDataPathSync": "function () { [native code] }",
			"getCrashFiles": "function () { [native code] }",
			"extname": "function () { [native code] }",
			"basename": "function () { [native code] }",
			"dirname": "function () { [native code] }",
			"join": "function () { [native code] }"
		},
		"processUtils": {
			"flushDNSCache": "function () { [native code] }",
			"flushCookies": "function () { [native code] }",
			"getLastCrash": "function () { [native code] }",
			"flushStorageData": "function () { [native code] }",
			"purgeMemory": "function () { [native code] }",
			"getCurrentCPUUsagePercent": "function () { [native code] }",
			"getCurrentMemoryUsageKB": "function () { [native code] }",
			"getCPUCoreCount": "function () { [native code] }",
			"getMainArgvSync": "function () { [native code] }"
		},
		"powerSaveBlocker": {
			"blockDisplaySleep": "function () { [native code] }",
			"unblockDisplaySleep": "function () { [native code] }",
			"cleanupDisplaySleep": "function () { [native code] }"
		},
		"http": {
			"getAPIEndpoint": "function () { [native code] }",
			"makeChunkedRequest": "function () { [native code] }"
		},
		"accessibility": {
			"isAccessibilitySupportEnabled": "function () { [native code] }"
		},
		"features": {
			"supports": "function () { [native code] }",
			"declareSupported": "function () { [native code] }"
		},
		"settings": {
			"get": "function () { [native code] }",
			"set": "function () { [native code] }",
			"getSync": "function () { [native code] }"
		},
		"userDataCache": {
			"getCached": "function () { [native code] }",
			"cacheUserData": "function () { [native code] }",
			"deleteCache": "function () { [native code] }"
		},
		"thumbar": {
			"setThumbarButtons": "function () { [native code] }"
		},
		"safeStorage": {
			"isEncryptionAvailable": "function () { [native code] }",
			"decryptString": "function () { [native code] }",
			"encryptString": "function () { [native code] }"
		},
		"remoteApp": {
			"getReleaseChannel": "function () { [native code] }",
			"getVersion": "function () { [native code] }",
			"getModuleVersions": "function () { [native code] }",
			"getPath": "function () { [native code] }",
			"setBadgeCount": "function () { [native code] }",
			"dock": {
				"setBadge": "function () { [native code] }",
				"bounce": "function () { [native code] }",
				"cancelBounce": "function () { [native code] }"
			},
			"relaunch": "function () { [native code] }",
			"getDefaultDoubleClickAction": "function () { [native code] }",
			"registerUserInteractionHandler": "function () { [native code] }"
		},
		"remotePowerMonitor": {
			"on": "function () { [native code] }",
			"removeListener": "function () { [native code] }",
			"removeAllListeners": "function () { [native code] }",
			"getSystemIdleTimeMs": "function () { [native code] }"
		}
	}
}